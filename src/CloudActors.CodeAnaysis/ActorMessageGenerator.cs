using System.Linq;
using Microsoft.CodeAnalysis;
using static Devlooped.CloudActors.Diagnostics;

namespace Devlooped.CloudActors;

[Generator(LanguageNames.CSharp)]
public class ActorMessageGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var options = context.GetOrleansOptions();
        var messages = context.CompilationProvider
            .SelectMany((x, _) => x.Assembly.GetAllTypes().OfType<INamedTypeSymbol>())
            .Where(IsActorMessage)
            .Where(t => t.IsPartial());

        context.RegisterImplementationSourceOutput(messages.Combine(options), (ctx, source) =>
        {
            var (message, options) = source;
            var ns = message.ContainingNamespace.ToDisplayString();
            var kind = message.IsRecord ? "record" : "class";
            var output =
                $$"""
                // <auto-generated/>

                using System.CodeDom.Compiler;
                using Orleans;

                namespace {{ns}}
                {
                    [GeneratedCode("Devlooped.CloudActors", "{{ThisAssembly.Info.InformationalVersion}}")]
                    [GenerateSerializer]
                    partial {{kind}} {{message.Name}};
                }
                """;

            var orleans = OrleansGenerator.GenerateCode(options, output, message.Name, ctx.CancellationToken);

            ctx.AddSource($"{message.ToFileName()}.Serializable.cs", output);
            ctx.AddSource($"{message.ToFileName()}.Serializable.orleans.cs", orleans);
        });
    }
}