using System.Collections.Generic;
using System.Linq;
using Microsoft.CodeAnalysis;

namespace Devlooped.CloudActors;

[Generator(LanguageNames.CSharp)]
public class ActorMessageGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var options = context.GetOrleansOptions();
        var messages = context.CompilationProvider
            .SelectMany((x, _) => x.Assembly.GetAllTypes().OfType<INamedTypeSymbol>())
            .Where(t => t.IsActorMessage())
            .Where(t => t.IsPartial());

        var additionalTypes = messages.SelectMany((x, _) =>
            x.GetMembers().OfType<IPropertySymbol>()
            // Generated serializers only expose public members.
            .Where(p => p.DeclaredAccessibility == Accessibility.Public)
            .Select(p => p.Type)
            .OfType<INamedTypeSymbol>()
            .Where(t => t.IsPartial())
            .Concat(x.GetMembers()
            .OfType<IMethodSymbol>()
            // Generated serializers only expose public members.
            .Where(m => m.DeclaredAccessibility == Accessibility.Public)
            .SelectMany(m => m.Parameters)
            .Select(p => p.Type)
            .OfType<INamedTypeSymbol>()))
            // We already generate separately for actor messages.
            .Where(t => !t.IsActorMessage() && t.IsPartial())
            .Collect();

        context.RegisterImplementationSourceOutput(messages.Combine(options), GenerateCode);
        context.RegisterImplementationSourceOutput(additionalTypes.Combine(options), (ctx, source) =>
        {
            var (messages, options) = source;
            var distinct = new HashSet<INamedTypeSymbol>(messages, SymbolEqualityComparer.Default);
            foreach (var message in distinct)
                GenerateCode(ctx, (message, options));
        });
    }

    static void GenerateCode(SourceProductionContext ctx, (INamedTypeSymbol, OrleansGeneratorOptions) source)
    {
        var (message, options) = source;

        var ns = message.ContainingNamespace.ToDisplayString();
        var kind = message.IsRecord ? "record" : "class";
        var output =
            $$"""
                // <auto-generated/>

                using System.CodeDom.Compiler;
                using Orleans;

                namespace {{ns}}
                {
                    [GeneratedCode("Devlooped.CloudActors", "{{ThisAssembly.Info.InformationalVersion}}")]
                    [GenerateSerializer]
                    partial {{kind}} {{message.Name}};
                }
                """;

        ctx.AddSource($"{message.ToFileName()}.Serializable.cs", output);

        // This supports the scenario where the actor and messages exist in the server project itself, 
        // which is likely not very common but nevertheless it should be supported.
        if (options.IsCloudActorsServer)
        {
            var orleans = OrleansGenerator.GenerateCode(options, output, message.Name, ctx.CancellationToken);
            ctx.AddSource($"{message.ToFileName()}.Serializable.orleans.cs", orleans);
        }
    }
}